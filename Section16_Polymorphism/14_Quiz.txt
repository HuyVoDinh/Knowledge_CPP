1.C++ achieves polymorphism by using ________.

A. dynamic functions 
B. member functions
C. static functions
D. virtual functions
=> D

2. Virtual functions are very powerful since they are bound at ________.

A. load-time
B. compile-time 
C. run-time 
D. link-time
=> C

3. The ________ keyword is used with virtual functions to tell the compiler that the function is being ________.

A. final, extended
B. final, called
C. override, redefined
D. override, overridden
=> D

4. In order to achieve dynamic polymorphism we must reference class objects using ________.

A. base class pointers
B. base class references
C. virtual pointers
D. A and B 
=> D

5. Classes that declare virtual functions should always declare a virtual ________.

A. copy/move constructors
B. destructor 
C. copy/move assignment
D. All of the above
=> B

6. If a class declares a pure virtual function, then that class is considered ________.

A. abstract
B. virtual
C. pure 
D. concrete
=> A

7. Classes with only pure virtual functions are often used in C++ as ________ classes.

A. virtual 
B. concrete
C. interfaces
D. pure
=> C

8. What statement below is NOT true?

A. Abstract base classes cannot be instantiated
B. Dynamic polymorphism allows programmers to think more abstractly
C. Pointers to a base class can be assigned the address of a derived class object.
D. Dynamic polymorphism is more efficient than static binding.
=> D

9. The final specifier is used to ________.

A. prevent a class member function from being overridden
B. show a class is ready for production
C. prevent a class from being derived from 
D. A and C
=> D

10. A class that declares a function as ________ expects it to be overridden in classes derived from it.

A. virtual
B. static
C. inline
D. final
=> A

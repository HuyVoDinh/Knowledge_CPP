[What is the STL?]

    A library of powerful, reusable, adaptable, generic classes and functions
        Example: 
            powerful: when use the vector class
            reusable: vector, when created vectors of integers and doubles and accounts,... We didn't have to do anything except tell the vector what we wanted it to hold. 
            adaptable: It provides containers, iterators and algorithms that we can adapt to make them do whatever we need them to do with our programs.
            implmented 

    Implemented using C++ templates 

    Implements common data structures and algorithms 

    Huge class library

[Why use the STL?]

    Assortment of commonly used containers      

    Known time and size complexity              => That means that when you use the containers and algorithms in the stl, there are no surprises. You know exactly how the algorithms behave as the size of the collection increases. Complexity theory is beyond the scope. 

    Tried and tested - Reusability              => The stl has been around a long time. It's been tried and tested across many millions of lines of code. 

    Consistent, fast, and type-safe

    Extensible

[Elements of the STL]

    Containers 
        Collections of objects or primitive types (array, vector, deque, stack, set, map, etc.)

    Algorithms 
        Functions for processing sequences of elements from containers (find, max, count, accumulate, sort, etc.)
    
    Iterators 
        Generate sequences of element from containers (forward, reverse, by value, by reference, constant, etc.)

A simple Example
    #include <vector>
    #include <algorithm>

    std::vector<int> v {1,5,3};

A simple example - sort a vector 
//sort algorithm needs a sequence of object to sort. 
// The iterator used produced a sequence of all the integers in the vector, but we could have easily provided only a subset if that's what we needed. So suppose we had a need to only sort the first half of a vector, we could modify the iterator to produce just the first half of the elements.
// Also we aren't restricted to using a vector. We can sort just about any stl container exactly the same way. Also we can extend the sort algorithm to tell it exactly how to compare the elements when sorting 
// For example, maybe we have a vector of account object, and want to sort them by balance. 
    std::sort(v.begin(), v.end());

    for (auto elem : v)
        std::cout << elem << std::endl;

    1
    3
    5

[A simple example - reverse a vector]

    std::reverse(v.begin(), v.end());

    for (auto elem : v)
        std::cout << elem << std::endl;

    5
    3
    1

[A simple example - accumulate] => want to add up, all the integers in the vector and store the result in a variable called sum. 

    int sum {};

    sum = std::accumulate(v.begin(), v.end(), 0);
    std::cout << sum << std::endl;

    9       // 1+3+5

[Types of Containers]

    Sequence containers 
        array, vector, list, forward_list, deque 

    Associative containers 
        set, multi set, map, multi map 

    Container adapters      => This category does not support iterators so they can't be used with stl algorithms, but they're so commonly used in programming that the stl provides support for them. 
        stack, queue, priority queue

[Types of Iterators]

    Input iterators - from the container to the program 
    Output iterator - from the program to the container -> can iterate over a sequence and write an element to a container. 
    Forward iterators - navigate one item at a time in one direction -> can iterate forward over a sequence and can read or write any element. 
    Bi-directional iterators - navigate one item at a time both directions -> like forward iterators, but they can iterate over a sequence in both directions.
    Random access iterators - diractly access a container item  -> can use the subscript operator to directly access element. Saw that with the vector class. 

[Type of Algorithms]

    About 60 algorithms in the STL 
    Non-modifying       // These depending on whether the algorithm modifies the sequence, it acts upon. 
    Modifying
/***
 * [The default constructor]
 * Does not expect any arguments
 *  Also called the no-args constructor
 * 
 * If your write no constructors at all for a class
 *  C++ will generate a Default Constructor that nothing =>C++ has to have a way to construct and initialize objects if don't provide any initialization information at all. C++ will generate a default constructor automatically. This default constructor does nothing, but it's still generated by C++. When you create objects wit hno initialization information, this is the constructor that's called. 
 * 
 * Called when you instantiate a new object with no arguments
 * 
 * Player frank;
 * Player *enemy = new Player;
 * 
 * [Declaring a Class]
 * Account - using default constructor
 * => C++ will automatically generate a default constructor that allows us to create objects with no initialization information.
 * class Account
 * {
 *  private:
 *      std::string name;
 *      double balance;
 *  public:
 *      bool withdraw(double amount);
 *      bool deposit(double amount);
 * }
 * 
 * [Creating objects]
 * Using the default constructor
 * 
 * Account frank_account;
 * Account jim_account;
 * 
 * Account *mary_account = new Account;  => Didn't provide any constructors at all. In the case of a pointer to an object, the same thing happens except that the object is created on the heap. Since the compiler generated default constructor does nothing. The class member attributes of the account class could contain garbage since they haven't been initialized.
 * delete mary_account;
 * 
 * 
 *  * [Declaring a Class]
 * Account - user-defined no-args constructor
 * => We're free to provide our own user-defined no args constructor. It's best practice to do so.
 * => We're defining our own user-defined no argus constructor. This constructor will be called when no initialization information is provided. So we're initializing the account member attributes to values we know about, not garbage data.
 * class Account
 * {
 *  private:
 *      std::string name;
 *      double balance;
 *  public:
 *      Account(){
 *          name = "None";
 *          balance = 0.0;
 *      }
 *      bool withdraw(double amount);
 *      bool deposit(double amount);
 * }
 * 
 * * [Declaring a Class]
 * Account - no default constructor
 * => We're defining a constructor that expects a string and a double and we initialize our member attributes to the values passed into the constructor.
 * => Once we define a constructor for our class, C++ will now not generate the no args default constructor automatically. If we still need it, then we must explicitly define it ourselves. If you have code that creates objects with no initialization information then that code will no longer compile since the default constructor is no longer generated by C++
 * class Account
 * {
 *  private:
 *      std::string name;
 *      double balance;
 *  public:
 *      Account(std::string name_val, double bal){
 *          name = name_val;
 *          balance = val;
 *      }
 *      bool withdraw(double amount);
 *      bool deposit(double amount);
 * }
 * 
 * [Creating objects]
 * Using the default constructor
 * => Default constructor is no longer automatically generated by the compiler, so we'll get three compiler errors when we try to create object.
 * => We can still create account objects, but we have to use the constructor we provided that expects a string and a double. -> Can create Bill's account since it provides the initialization information. required by the constructor
 * Account frank_account;                       // Error
 * Account jim_account;                         // Error
 * 
 * Account *mary_account = new Account          // Error
 * delete mary_account;
 * 
 * Account bill_account {"Bill", 1500.0};       // OK
 * ***/

#include <iostream>
#include <string>
using namespace std;

class Player
{
    private:
        std::string name;
        int health;
        int xp;
    public:
        void set_name(std::string name_val){
            name = name_val;
        }
        std::string get_name(){
            return name;
        }

        //Example 2
        // Player(){
        //     name = "None";
        //     health = 100;
        //     xp = 3;
        // };

        Player(std::string name_val, int health_val, int xp_val){
            name = name_val;
            health = health_val;
            xp = xp_val;
        }
};

int main(){
    //Example 1
    // Player frank;
    // frank.set_name("Frank");
    // cout << frank.get_name() << endl;

    // //Example 2
    // Player frank;
    // cout << frank.get_name() << endl;
    // return 0;

    //Example 2
    // Player frank; => No matching function call for the no args constructor. The idea being that now you've provided a way to construct your object so C++ note will no longer provide a default way. Maybe you don't want a default way. So this won't compile
    Player frank {"Frank", 100,13};// => Constructor is boing to be called, the one that is just created.
    cout << frank.get_name() << endl;
    return 0;
}